# ci.yml
# name: ReleasePages 
# on:
#   push:
#     branches:
#       - main
# jobs:
#   build-and-deploy:
#     concurrency: ci-${{ github.ref }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout 🛎️ # 将代码拉取到虚拟机
#         uses: actions/checkout@v3

#       - name: Install and Build 🔧 # 安装依赖、打包，如果提前已打包好无需这一步
#         run: |
#           npm install
#           npm run build

#       - name: Deploy 🚀 # 部署
#         uses: JamesIves/github-pages-deploy-action@v4.3.3
#         with:
#           branch: gh-pages # 部署后提交到那个分支
#           folder: dist # 这里填打包好的目录名称


name: ReleasePages

on:
  # 每当 push 到 main 分支时触发部署
  push:
    branches: [main]
  # 手动触发部署
  workflow_dispatch:

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          # 选择要使用的 node 版本
          node-version: '14'

      # 缓存 node_modules
      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 如果缓存没有命中，安装依赖
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      # 运行构建脚本
      - name: Build frontend
        run: yarn build

      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v2
        with:
          # 部署到 gh-pages 分支
          target_branch: gh-pages
          # 部署目录为Vite项目的默认输出目录
          build_dir: ./dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
